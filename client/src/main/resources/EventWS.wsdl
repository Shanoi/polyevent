<?xml version='1.0' encoding='UTF-8'?>
<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://www.polytech.unice.fr/si/4a/isa/event"
                  xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                  name="EventServiceImplService" targetNamespace="http://www.polytech.unice.fr/si/4a/isa/event">
    <wsdl:types>
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.polytech.unice.fr/si/4a/isa/event"
                   attributeFormDefault="unqualified" elementFormDefault="unqualified"
                   targetNamespace="http://www.polytech.unice.fr/si/4a/isa/event">
            <xs:element name="confirmEvent" type="tns:confirmEvent"/>
            <xs:element name="confirmEventResponse" type="tns:confirmEventResponse"/>
            <xs:element name="getEventsByOrganizer" type="tns:getEventsByOrganizer"/>
            <xs:element name="getEventsByOrganizerResponse" type="tns:getEventsByOrganizerResponse"/>
            <xs:element name="getSubmittedEvents" type="tns:getSubmittedEvents"/>
            <xs:element name="getSubmittedEventsResponse" type="tns:getSubmittedEventsResponse"/>
            <xs:element name="submitNewEvent" type="tns:submitNewEvent"/>
            <xs:element name="submitNewEventResponse" type="tns:submitNewEventResponse"/>
            <xs:complexType name="confirmEvent">
                <xs:sequence>
                    <xs:element minOccurs="0" name="event_name" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="rooms" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="confirmEventResponse">
                <xs:sequence>
                    <xs:element name="return" type="xs:boolean"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="getEventsByOrganizer">
                <xs:sequence>
                    <xs:element minOccurs="0" name="organizer_email" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="getEventsByOrganizerResponse">
                <xs:sequence>
                    <xs:element name="_return">
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
                                    <xs:complexType>
                                        <xs:sequence>
                                            <xs:element minOccurs="0" name="key" type="xs:string"/>
                                            <xs:element minOccurs="0" name="value" type="tns:eventStatus"/>
                                        </xs:sequence>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="getSubmittedEvents">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="getSubmittedEventsResponse">
                <xs:sequence>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:event"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="event">
                <xs:sequence>
                    <xs:element minOccurs="0" name="endingDate" type="tns:timestamp"/>
                    <xs:element name="id" type="xs:int"/>
                    <xs:element minOccurs="0" name="name" type="xs:string"/>
                    <xs:element name="nbAttendee" type="xs:int"/>
                    <xs:element minOccurs="0" name="organizer" type="tns:organizer"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="providers" nillable="true"
                                type="tns:provider"/>
                    <xs:element minOccurs="0" name="quote" type="tns:quote"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="rooms" nillable="true" type="tns:room"/>
                    <xs:element minOccurs="0" name="startingDate" type="tns:timestamp"/>
                    <xs:element minOccurs="0" name="status" type="tns:eventStatus"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="timestamp">
                <xs:sequence>
                    <xs:element name="nanos" type="xs:int"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="organizer">
                <xs:sequence>
                    <xs:element minOccurs="0" name="email" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="events" nillable="true" type="tns:event"/>
                    <xs:element name="id" type="xs:int"/>
                    <xs:element name="loggedIn" type="xs:boolean"/>
                    <xs:element minOccurs="0" name="name" type="xs:string"/>
                    <xs:element minOccurs="0" name="password" type="xs:string"/>
                    <xs:element minOccurs="0" name="phone" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="provider">
                <xs:sequence>
                    <xs:element minOccurs="0" name="address" type="xs:string"/>
                    <xs:element minOccurs="0" name="event" type="tns:event"/>
                    <xs:element name="id" type="xs:int"/>
                    <xs:element minOccurs="0" name="mail" type="xs:string"/>
                    <xs:element minOccurs="0" name="name" type="xs:string"/>
                    <xs:element minOccurs="0" name="phone" type="xs:string"/>
                    <xs:element name="price" type="xs:float"/>
                    <xs:element minOccurs="0" name="type" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="quote">
                <xs:sequence>
                    <xs:element minOccurs="0" name="description" type="xs:string"/>
                    <xs:element minOccurs="0" name="event" type="tns:event"/>
                    <xs:element name="id" type="xs:int"/>
                    <xs:element name="price" type="xs:float"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="room">
                <xs:sequence>
                    <xs:element name="capacity" type="xs:int"/>
                    <xs:element name="id" type="xs:int"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="materials" nillable="true"
                                type="tns:material"/>
                    <xs:element minOccurs="0" name="name" type="xs:string"/>
                    <xs:element minOccurs="0" name="type" type="tns:roomType"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="material">
                <xs:sequence>
                    <xs:element name="id" type="xs:int"/>
                    <xs:element name="quantity" type="xs:int"/>
                    <xs:element minOccurs="0" name="room" type="tns:room"/>
                    <xs:element minOccurs="0" name="type" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="submitNewEvent">
                <xs:sequence>
                    <xs:element minOccurs="0" name="event_name" type="xs:string"/>
                    <xs:element minOccurs="0" name="start_date" type="xs:string"/>
                    <xs:element minOccurs="0" name="end_date" type="xs:string"/>
                    <xs:element name="nb_attendee" type="xs:int"/>
                    <xs:element minOccurs="0" name="organizer_email" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="submitNewEventResponse">
                <xs:sequence/>
            </xs:complexType>
            <xs:simpleType name="eventStatus">
                <xs:restriction base="xs:string">
                    <xs:enumeration value="SUBMITTED"/>
                    <xs:enumeration value="CONFIRMED"/>
                    <xs:enumeration value="PAID"/>
                    <xs:enumeration value="RUNNING"/>
                    <xs:enumeration value="FINISHED"/>
                </xs:restriction>
            </xs:simpleType>
            <xs:simpleType name="roomType">
                <xs:restriction base="xs:string">
                    <xs:enumeration value="AMPHI"/>
                    <xs:enumeration value="COURS"/>
                    <xs:enumeration value="TD"/>
                    <xs:enumeration value="UNKNOWN"/>
                </xs:restriction>
            </xs:simpleType>
            <xs:element name="ExternalPartnerException" type="tns:ExternalPartnerException"/>
            <xs:complexType name="ExternalPartnerException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:element name="UnknownEventException" type="tns:UnknownEventException"/>
            <xs:complexType name="UnknownEventException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="name" type="xs:string"/>
                    <xs:element minOccurs="0" name="message" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:element name="RegisterEventException" type="tns:RegisterEventException"/>
            <xs:complexType name="RegisterEventException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="name" type="xs:string"/>
                    <xs:element minOccurs="0" name="message" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:element name="AlreadyExistingEventException" type="tns:AlreadyExistingEventException"/>
            <xs:complexType name="AlreadyExistingEventException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="name" type="xs:string"/>
                    <xs:element minOccurs="0" name="message" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
        </xs:schema>
    </wsdl:types>
    <wsdl:message name="ExternalPartnerException">
        <wsdl:part element="tns:ExternalPartnerException" name="ExternalPartnerException">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="submitNewEventResponse">
        <wsdl:part element="tns:submitNewEventResponse" name="parameters">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="AlreadyExistingEventException">
        <wsdl:part element="tns:AlreadyExistingEventException" name="AlreadyExistingEventException">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="confirmEventResponse">
        <wsdl:part element="tns:confirmEventResponse" name="parameters">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="confirmEvent">
        <wsdl:part element="tns:confirmEvent" name="parameters">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="getEventsByOrganizer">
        <wsdl:part element="tns:getEventsByOrganizer" name="parameters">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="getSubmittedEventsResponse">
        <wsdl:part element="tns:getSubmittedEventsResponse" name="parameters">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="getSubmittedEvents">
        <wsdl:part element="tns:getSubmittedEvents" name="parameters">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="UnknownEventException">
        <wsdl:part element="tns:UnknownEventException" name="UnknownEventException">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="RegisterEventException">
        <wsdl:part element="tns:RegisterEventException" name="RegisterEventException">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="getEventsByOrganizerResponse">
        <wsdl:part element="tns:getEventsByOrganizerResponse" name="parameters">
        </wsdl:part>
    </wsdl:message>
    <wsdl:message name="submitNewEvent">
        <wsdl:part element="tns:submitNewEvent" name="parameters">
        </wsdl:part>
    </wsdl:message>
    <wsdl:portType name="EventService">
        <wsdl:operation name="confirmEvent">
            <wsdl:input message="tns:confirmEvent" name="confirmEvent">
            </wsdl:input>
            <wsdl:output message="tns:confirmEventResponse" name="confirmEventResponse">
            </wsdl:output>
            <wsdl:fault message="tns:ExternalPartnerException" name="ExternalPartnerException">
            </wsdl:fault>
            <wsdl:fault message="tns:UnknownEventException" name="UnknownEventException">
            </wsdl:fault>
            <wsdl:fault message="tns:RegisterEventException" name="RegisterEventException">
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getEventsByOrganizer">
            <wsdl:input message="tns:getEventsByOrganizer" name="getEventsByOrganizer">
            </wsdl:input>
            <wsdl:output message="tns:getEventsByOrganizerResponse" name="getEventsByOrganizerResponse">
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="getSubmittedEvents">
            <wsdl:input message="tns:getSubmittedEvents" name="getSubmittedEvents">
            </wsdl:input>
            <wsdl:output message="tns:getSubmittedEventsResponse" name="getSubmittedEventsResponse">
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="submitNewEvent">
            <wsdl:input message="tns:submitNewEvent" name="submitNewEvent">
            </wsdl:input>
            <wsdl:output message="tns:submitNewEventResponse" name="submitNewEventResponse">
            </wsdl:output>
            <wsdl:fault message="tns:AlreadyExistingEventException" name="AlreadyExistingEventException">
            </wsdl:fault>
            <wsdl:fault message="tns:RegisterEventException" name="RegisterEventException">
            </wsdl:fault>
        </wsdl:operation>
    </wsdl:portType>
    <wsdl:binding name="EventServiceImplServiceSoapBinding" type="tns:EventService">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <wsdl:operation name="confirmEvent">
            <soap:operation soapAction="" style="document"/>
            <wsdl:input name="confirmEvent">
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="confirmEventResponse">
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="ExternalPartnerException">
                <soap:fault name="ExternalPartnerException" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="UnknownEventException">
                <soap:fault name="UnknownEventException" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="RegisterEventException">
                <soap:fault name="RegisterEventException" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getEventsByOrganizer">
            <soap:operation soapAction="" style="document"/>
            <wsdl:input name="getEventsByOrganizer">
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="getEventsByOrganizerResponse">
                <soap:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="getSubmittedEvents">
            <soap:operation soapAction="" style="document"/>
            <wsdl:input name="getSubmittedEvents">
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="getSubmittedEventsResponse">
                <soap:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="submitNewEvent">
            <soap:operation soapAction="" style="document"/>
            <wsdl:input name="submitNewEvent">
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="submitNewEventResponse">
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="AlreadyExistingEventException">
                <soap:fault name="AlreadyExistingEventException" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="RegisterEventException">
                <soap:fault name="RegisterEventException" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>
    </wsdl:binding>
    <wsdl:service name="EventServiceImplService">
        <wsdl:port binding="tns:EventServiceImplServiceSoapBinding" name="EventServiceImplPort">
            <soap:address location="http://localhost:8080/event/webservices/EventWS"/>
        </wsdl:port>
    </wsdl:service>
</wsdl:definitions>